[
    {
        "signature": "public StringMatcher andMatcher(final StringMatcher... stringMatchers)",
        "implementation": "public StringMatcher andMatcher(final StringMatcher... stringMatchers) {\n        final int len = ArrayUtils.getLength(stringMatchers);\n        if (len == 0) {\n            return NONE_MATCHER;\n        }\n        if (len == 1) {\n            return stringMatchers[0];\n        }\n        return new AbstractStringMatcher.AndStringMatcher(stringMatchers);\n    }",
        "called_methods": [
            "getLength"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "andMatcher",
        "javadoc": "/**\n     * Creates a matcher that matches all of the given matchers in order.\n     *\n     * @param stringMatchers the matcher\n     * @return a matcher that matches all of the given matchers in order.\n     * @since 1.9\n     */"
    },
    {
        "signature": "public StringMatcher charMatcher(final char ch)",
        "implementation": "public StringMatcher charMatcher(final char ch) {\n        return new AbstractStringMatcher.CharMatcher(ch);\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "charMatcher",
        "javadoc": "/**\n     * Constructor that creates a matcher from a character.\n     *\n     * @param ch the character to match, must not be null\n     * @return a new Matcher for the given char\n     */"
    },
    {
        "signature": "public StringMatcher charSetMatcher(final String chars)",
        "implementation": "public StringMatcher charSetMatcher(final String chars) {\n        final int len = StringUtils.length(chars);\n        if (len == 0) {\n            return NONE_MATCHER;\n        }\n        if (len == 1) {\n            return new AbstractStringMatcher.CharMatcher(chars.charAt(0));\n        }\n        return new AbstractStringMatcher.CharSetMatcher(chars.toCharArray());\n    }",
        "called_methods": [
            "getLength",
            "length",
            "charAt",
            "toCharArray"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "charSetMatcher",
        "javadoc": "/**\n     * Creates a matcher from a string representing a set of characters.\n     *\n     * @param chars the characters to match, null or empty matches nothing\n     * @return a new Matcher for the given characters\n     */"
    },
    {
        "signature": "public StringMatcher commaMatcher()",
        "implementation": "public StringMatcher commaMatcher() {\n        return COMMA_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "commaMatcher",
        "javadoc": "/**\n     * Returns a matcher which matches the comma character.\n     *\n     * @return a matcher for a comma\n     */"
    },
    {
        "signature": "public StringMatcher doubleQuoteMatcher()",
        "implementation": "public StringMatcher doubleQuoteMatcher() {\n        return DOUBLE_QUOTE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "doubleQuoteMatcher",
        "javadoc": "/**\n     * Returns a matcher which matches the double quote character.\n     *\n     * @return a matcher for a double quote\n     */"
    },
    {
        "signature": "public StringMatcher noneMatcher()",
        "implementation": "public StringMatcher noneMatcher() {\n        return NONE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "noneMatcher",
        "javadoc": "/**\n     * Matches no characters.\n     *\n     * @return a matcher that matches nothing\n     */"
    },
    {
        "signature": "public StringMatcher quoteMatcher()",
        "implementation": "public StringMatcher quoteMatcher() {\n        return QUOTE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "quoteMatcher",
        "javadoc": "/**\n     * Returns a matcher which matches the single or double quote character.\n     *\n     * @return a matcher for a single or double quote\n     */"
    },
    {
        "signature": "public StringMatcher singleQuoteMatcher()",
        "implementation": "public StringMatcher singleQuoteMatcher() {\n        return SINGLE_QUOTE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "singleQuoteMatcher",
        "javadoc": "/**\n     * Returns a matcher which matches the single quote character.\n     *\n     * @return a matcher for a single quote\n     */"
    },
    {
        "signature": "public StringMatcher spaceMatcher()",
        "implementation": "public StringMatcher spaceMatcher() {\n        return SPACE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "spaceMatcher",
        "javadoc": "/**\n     * Returns a matcher which matches the space character.\n     *\n     * @return a matcher for a space\n     */"
    },
    {
        "signature": "public StringMatcher splitMatcher()",
        "implementation": "public StringMatcher splitMatcher() {\n        return SPLIT_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "splitMatcher",
        "javadoc": "/**\n     * Matches the same characters as StringTokenizer, namely space, tab, newline and form feed.\n     *\n     * @return The split matcher\n     */"
    },
    {
        "signature": "public StringMatcher stringMatcher(final String str)",
        "implementation": "public StringMatcher stringMatcher(final String str) {\n        return StringUtils.isEmpty(str) ? NONE_MATCHER : stringMatcher(str.toCharArray());\n    }",
        "called_methods": [
            "getLength",
            "isEmpty",
            "stringMatcher",
            "toCharArray"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "stringMatcher",
        "javadoc": "/**\n     * Creates a matcher from a string.\n     *\n     * @param str the string to match, null or empty matches nothing\n     * @return a new Matcher for the given String\n     */"
    },
    {
        "signature": "public StringMatcher tabMatcher()",
        "implementation": "public StringMatcher tabMatcher() {\n        return TAB_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "tabMatcher",
        "javadoc": "/**\n     * Returns a matcher which matches the tab character.\n     *\n     * @return a matcher for a tab\n     */"
    },
    {
        "signature": "public StringMatcher trimMatcher()",
        "implementation": "public StringMatcher trimMatcher() {\n        return TRIM_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "trimMatcher",
        "javadoc": "/**\n     * Matches the String trim() whitespace characters.\n     *\n     * @return The trim matcher\n     */"
    }
]