[
    {
        "signature": "public Double cosineSimilarity(final Map<CharSequence, Integer> leftVector,\n                                   final Map<CharSequence, Integer> rightVector)",
        "implementation": "public Double cosineSimilarity(final Map<CharSequence, Integer> leftVector,\n                                   final Map<CharSequence, Integer> rightVector) {\n        if (leftVector == null || rightVector == null) {\n            throw new IllegalArgumentException(\"Vectors must not be null\");\n        }\n\n        final Set<CharSequence> intersection = getIntersection(leftVector, rightVector);\n\n        final double dotProduct = dot(leftVector, rightVector, intersection);\n        double d1 = 0.0d;\n        for (final Integer value : leftVector.values()) {\n            d1 += Math.pow(value, 2);\n        }\n        double d2 = 0.0d;\n        for (final Integer value : rightVector.values()) {\n            d2 += Math.pow(value, 2);\n        }\n        final double cosineSimilarity;\n        if (d1 <= 0.0 || d2 <= 0.0) {\n            cosineSimilarity = 0.0;\n        } else {\n            cosineSimilarity = dotProduct / (Math.sqrt(d1) * Math.sqrt(d2));\n        }\n        return cosineSimilarity;\n    }",
        "called_methods": [
            "getIntersection",
            "dot",
            "values",
            "pow",
            "sqrt"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\CosineSimilarity.java",
        "name": "cosineSimilarity",
        "javadoc": "/**\n     * Calculates the cosine similarity for two given vectors.\n     *\n     * @param leftVector left vector\n     * @param rightVector right vector\n     * @return cosine similarity between the two vectors\n     */"
    },
    {
        "signature": "private double dot(final Map<CharSequence, Integer> leftVector, final Map<CharSequence, Integer> rightVector,\n            final Set<CharSequence> intersection)",
        "implementation": "private double dot(final Map<CharSequence, Integer> leftVector, final Map<CharSequence, Integer> rightVector,\n            final Set<CharSequence> intersection) {\n        long dotProduct = 0;\n        for (final CharSequence key : intersection) {\n            dotProduct += leftVector.get(key) * (long) rightVector.get(key);\n        }\n        return dotProduct;\n    }",
        "called_methods": [
            "get"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\CosineSimilarity.java",
        "name": "dot",
        "javadoc": "/**\n     * Computes the dot product of two vectors. It ignores remaining elements. It means\n     * that if a vector is longer than other, then a smaller part of it will be used to compute\n     * the dot product.\n     *\n     * @param leftVector left vector\n     * @param rightVector right vector\n     * @param intersection common elements\n     * @return The dot product\n     */"
    },
    {
        "signature": "private Set<CharSequence> getIntersection(final Map<CharSequence, Integer> leftVector,\n            final Map<CharSequence, Integer> rightVector)",
        "implementation": "private Set<CharSequence> getIntersection(final Map<CharSequence, Integer> leftVector,\n            final Map<CharSequence, Integer> rightVector) {\n        final Set<CharSequence> intersection = new HashSet<>(leftVector.keySet());\n        intersection.retainAll(rightVector.keySet());\n        return intersection;\n    }",
        "called_methods": [
            "keySet",
            "retainAll"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\CosineSimilarity.java",
        "name": "getIntersection",
        "javadoc": "/**\n     * Returns a set with keys common to the two given maps.\n     *\n     * @param leftVector left vector map\n     * @param rightVector right vector map\n     * @return common strings\n     */"
    }
]