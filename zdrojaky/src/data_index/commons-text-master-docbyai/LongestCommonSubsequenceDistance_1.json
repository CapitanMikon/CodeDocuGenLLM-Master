[
    {
        "signature": "public Integer apply(final CharSequence left, final CharSequence right)",
        "implementation": "public Integer apply(final CharSequence left, final CharSequence right) {\n        // Quick return for invalid inputs\n        if (left == null || right == null) {\n            throw new IllegalArgumentException(\"Inputs must not be null\");\n        }\n        return left.length() + right.length() - 2 * LongestCommonSubsequence.INSTANCE.apply(left, right);\n    }",
        "called_methods": [
            "length",
            "apply"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceDistance.java",
        "name": "apply",
        "javadoc": "/**\n     * Calculates an edit distance between two {@code CharSequence}'s {@code left} and\n     * {@code right} as: {@code left.length() + right.length() - 2 * LCS(left, right)}, where\n     * {@code LCS} is given in {@link LongestCommonSubsequence#apply(CharSequence, CharSequence)}.\n     *\n     * @param left first character sequence\n     * @param right second character sequence\n     * @return distance\n     * @throws IllegalArgumentException\n     *             if either String input {@code null}\n     */"
    }
]