[
    {
        "signature": "public Builder append(final String input)",
        "implementation": "public Builder append(final String input) {\n            sb.append(input);\n            return this;\n        }",
        "called_methods": [
            "append"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "append",
        "javadoc": "/**\n         * Literal append, no escaping being done.\n         *\n         * @param input the String to append\n         * @return {@code this}, to enable chaining\n         */"
    },
    {
        "signature": "public Builder escape(final String input)",
        "implementation": "public Builder escape(final String input) {\n            sb.append(translator.translate(input));\n            return this;\n        }",
        "called_methods": [
            "append",
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escape",
        "javadoc": "/**\n         * Escape {@code input} according to the given {@link CharSequenceTranslator}.\n         *\n         * @param input the String to escape\n         * @return {@code this}, to enable chaining\n         */"
    },
    {
        "signature": "public int translate(final CharSequence input, final int index, final Writer writer) throws IOException",
        "implementation": "public int translate(final CharSequence input, final int index, final Writer writer) throws IOException {\n\n            if (index != 0) {\n                throw new IllegalStateException(\"XsiUnescaper should never reach the [1] index\");\n            }\n\n            final String s = input.toString();\n\n            int segmentStart = 0;\n            int searchOffset = 0;\n            while (true) {\n                final int pos = s.indexOf(BACKSLASH, searchOffset);\n                if (pos == -1) {\n                    if (segmentStart < s.length()) {\n                        writer.write(s.substring(segmentStart));\n                    }\n                    break;\n                }\n                if (pos > segmentStart) {\n                    writer.write(s.substring(segmentStart, pos));\n                }\n                segmentStart = pos + 1;\n                searchOffset = pos + 2;\n            }\n\n            return Character.codePointCount(input, 0, input.length());\n        }",
        "called_methods": [
            "toString",
            "indexOf",
            "length",
            "write",
            "substring",
            "codePointCount"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "translate",
        "javadoc": ""
    },
    {
        "signature": "public static StringEscapeUtils.Builder builder(final CharSequenceTranslator translator)",
        "implementation": "public static StringEscapeUtils.Builder builder(final CharSequenceTranslator translator) {\n        return new Builder(translator);\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "builder",
        "javadoc": "/**\n     * Gets a {@link Builder}.\n     * @param translator the text translator\n     * @return {@link Builder}\n     */"
    },
    {
        "signature": "public static String escapeCsv(final String input)",
        "implementation": "public static String escapeCsv(final String input) {\n        return ESCAPE_CSV.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeCsv",
        "javadoc": "/**\n     * Returns a {@code String} value for a CSV column enclosed in double quotes,\n     * if required.\n     *\n     * <p>If the value contains a comma, newline or double quote, then the\n     *    String value is returned enclosed in double quotes.</p>\n     *\n     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n     *\n     * <p>If the value does not contain a comma, newline or double quote, then the\n     *    String value is returned unchanged.</p>\n     *\n     * see <a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"https://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param input the input CSV column String, may be null\n     * @return The input String, enclosed in double quotes if the value contains a comma,\n     * newline or double quote, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String escapeEcmaScript(final String input)",
        "implementation": "public static String escapeEcmaScript(final String input) {\n        return ESCAPE_ECMASCRIPT.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeEcmaScript",
        "javadoc": "/**\n     * Escapes the characters in a {@code String} using EcmaScript String rules.\n     *\n     * <p>Escapes any values it finds into their EcmaScript String form.\n     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters {@code '\\\\'} and\n     * {@code 't'}.</p>\n     *\n     * <p>The only difference between Java strings and EcmaScript strings\n     * is that in EcmaScript, a single quote and forward-slash (/) are escaped.</p>\n     *\n     * <p>Note that EcmaScript is best known by the JavaScript and ActionScript dialects.</p>\n     *\n     * <p>Example:</p>\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn\\'t say, \\\"Stop!\\\"\n     * </pre>\n     *\n     * <strong>Security Note.</strong> We only provide backslash escaping in this method. For example, {@code '\\\"'} has the output\n     * {@code '\\\\\\\"'} which could result in potential issues in the case where the string being escaped is being used\n     * in an HTML tag like {@code <select onmouseover=\"...\" />}. If you wish to have more rigorous string escaping, you\n     * may consider the\n     * <a href=\"https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API_JAVA\">ESAPI Libraries</a>.\n     * Further, you can view the <a href=\"https://github.com/esapi\">ESAPI GitHub Org</a>.\n     *\n     * @param input  String to escape values in, may be null\n     * @return String with escaped values, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String escapeHtml3(final String input)",
        "implementation": "public static String escapeHtml3(final String input) {\n        return ESCAPE_HTML3.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeHtml3",
        "javadoc": "/**\n     * Escapes the characters in a {@code String} using HTML entities.\n     *\n     * <p>Supports only the HTML 3.0 entities.</p>\n     *\n     * @param input  the {@code String} to escape, may be null\n     * @return a new escaped {@code String}, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String escapeHtml4(final String input)",
        "implementation": "public static String escapeHtml4(final String input) {\n        return ESCAPE_HTML4.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeHtml4",
        "javadoc": "/**\n     * Escapes the characters in a {@code String} using HTML entities.\n     *\n     * <p>\n     * For example:\n     * </p>\n     * <p>{@code \"bread\" &amp; \"butter\"}</p>\n     * becomes:\n     * <p>\n     * {@code &quot;bread&quot; &amp;amp; &quot;butter&quot;}.\n     * </p>\n     *\n     * <p>Supports all known HTML 4.0 entities, including funky accents.\n     * Note that the commonly used apostrophe escape character (&amp;apos;)\n     * is not a legal entity and so is not supported).</p>\n     *\n     * @param input  the {@code String} to escape, may be null\n     * @return a new escaped {@code String}, {@code null} if null string input\n     * @see <a href=\"https://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n     */"
    },
    {
        "signature": "public static String escapeJava(final String input)",
        "implementation": "public static String escapeJava(final String input) {\n        return ESCAPE_JAVA.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeJava",
        "javadoc": "/**\n     * Escapes the characters in a {@code String} using Java String rules.\n     *\n     * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters {@code '\\\\'} and\n     * {@code 't'}.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote and forward-slash (/) are escaped.</p>\n     *\n     * <p>Example:</p>\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn't say, \\\"Stop!\\\"\n     * </pre>\n     *\n     * @param input  String to escape values in, may be null\n     * @return String with escaped values, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String escapeJson(final String input)",
        "implementation": "public static String escapeJson(final String input) {\n        return ESCAPE_JSON.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeJson",
        "javadoc": "/**\n     * Escapes the characters in a {@code String} using Json String rules.\n     *\n     * <p>Escapes any values it finds into their Json String form.\n     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters {@code '\\\\'} and\n     * {@code 't'}.</p>\n     *\n     * <p>The only difference between Java strings and Json strings\n     * is that in Json, forward-slash (/) is escaped.</p>\n     *\n     * <p>See http://www.ietf.org/rfc/rfc4627.txt for further details.</p>\n     *\n     * <p>Example:</p>\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn't say, \\\"Stop!\\\"\n     * </pre>\n     *\n     * @param input  String to escape values in, may be null\n     * @return String with escaped values, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String escapeXml10(final String input)",
        "implementation": "public static String escapeXml10(final String input) {\n        return ESCAPE_XML10.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeXml10",
        "javadoc": "/**\n     * Escapes the characters in a {@code String} using XML entities.\n     *\n     * <p>For example: {@code \"bread\" & \"butter\"} =&gt;\n     * {@code &quot;bread&quot; &amp; &quot;butter&quot;}.\n     * </p>\n     *\n     * <p>Note that XML 1.0 is a text-only format: it cannot represent control\n     * characters or unpaired Unicode surrogate code points, even after escaping.\n     * {@code escapeXml10} will remove characters that do not fit in the\n     * following ranges:</p>\n     *\n     * <p>{@code #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]}</p>\n     *\n     * <p>Though not strictly necessary, {@code escapeXml10} will escape\n     * characters in the following ranges:</p>\n     *\n     * <p>{@code [#x7F-#x84] | [#x86-#x9F]}</p>\n     *\n     * <p>The returned string can be inserted into a valid XML 1.0 or XML 1.1\n     * document. If you want to allow more non-text characters in an XML 1.1\n     * document, use {@link #escapeXml11(String)}.</p>\n     *\n     * @param input  the {@code String} to escape, may be null\n     * @return a new escaped {@code String}, {@code null} if null string input\n     * @see #unescapeXml(String)\n     */"
    },
    {
        "signature": "public static String escapeXml11(final String input)",
        "implementation": "public static String escapeXml11(final String input) {\n        return ESCAPE_XML11.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeXml11",
        "javadoc": "/**\n     * Escapes the characters in a {@code String} using XML entities.\n     *\n     * <p>For example: {@code \"bread\" & \"butter\"} =&gt;\n     * {@code &quot;bread&quot; &amp; &quot;butter&quot;}.\n     * </p>\n     *\n     * <p>XML 1.1 can represent certain control characters, but it cannot represent\n     * the null byte or unpaired Unicode surrogate code points, even after escaping.\n     * {@code escapeXml11} will remove characters that do not fit in the following\n     * ranges:</p>\n     *\n     * <p>{@code [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]}</p>\n     *\n     * <p>{@code escapeXml11} will escape characters in the following ranges:</p>\n     *\n     * <p>{@code [#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]}</p>\n     *\n     * <p>The returned string can be inserted into a valid XML 1.1 document. Do not\n     * use it for XML 1.0 documents.</p>\n     *\n     * @param input  the {@code String} to escape, may be null\n     * @return a new escaped {@code String}, {@code null} if null string input\n     * @see #unescapeXml(String)\n     */"
    },
    {
        "signature": "public static String escapeXSI(final String input)",
        "implementation": "public static String escapeXSI(final String input) {\n        return ESCAPE_XSI.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "escapeXSI",
        "javadoc": "/**\n     * Escapes the characters in a {@code String} using XSI rules.\n     *\n     * <p><strong>Beware!</strong> In most cases you don't want to escape shell commands but use multi-argument\n     * methods provided by {@link ProcessBuilder} or {@link Runtime#exec(String[])}\n     * instead.</p>\n     *\n     * <p>Example:</p>\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He\\ didn\\'t\\ say,\\ \\\"Stop!\\\"\n     * </pre>\n     *\n     * @see <a href=\"https://pubs.opengroup.org/onlinepubs/7908799/xcu/chap2.html\">Shell Command Language</a>\n     * @param input  String to escape values in, may be null\n     * @return String with escaped values, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String unescapeCsv(final String input)",
        "implementation": "public static String unescapeCsv(final String input) {\n        return UNESCAPE_CSV.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "unescapeCsv",
        "javadoc": "/**\n     * Returns a {@code String} value for an unescaped CSV column.\n     *\n     * <p>If the value is enclosed in double quotes, and contains a comma, newline\n     *    or double quote, then quotes are removed.\n     * </p>\n     *\n     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped\n     *    to just one double quote.</p>\n     *\n     * <p>If the value is not enclosed in double quotes, or is and does not contain a\n     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n     *\n     * see <a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"https://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param input the input CSV column String, may be null\n     * @return The input String, with enclosing double quotes removed and embedded double\n     * quotes unescaped, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String unescapeEcmaScript(final String input)",
        "implementation": "public static String unescapeEcmaScript(final String input) {\n        return UNESCAPE_ECMASCRIPT.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "unescapeEcmaScript",
        "javadoc": "/**\n     * Unescapes any EcmaScript literals found in the {@code String}.\n     *\n     * <p>For example, it will turn a sequence of {@code '\\'} and {@code 'n'}\n     * into a newline character, unless the {@code '\\'} is preceded by another\n     * {@code '\\'}.</p>\n     *\n     * @see #unescapeJava(String)\n     * @param input  the {@code String} to unescape, may be null\n     * @return A new unescaped {@code String}, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String unescapeHtml3(final String input)",
        "implementation": "public static String unescapeHtml3(final String input) {\n        return UNESCAPE_HTML3.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "unescapeHtml3",
        "javadoc": "/**\n     * Unescapes a string containing entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes. Supports only HTML 3.0 entities.\n     *\n     * @param input  the {@code String} to unescape, may be null\n     * @return a new unescaped {@code String}, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String unescapeHtml4(final String input)",
        "implementation": "public static String unescapeHtml4(final String input) {\n        return UNESCAPE_HTML4.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "unescapeHtml4",
        "javadoc": "/**\n     * Unescapes a string containing entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes. Supports HTML 4.0 entities.\n     *\n     * <p>For example, the string {@code \"&lt;Fran&ccedil;ais&gt;\"}\n     * will become {@code \"<Fran\ufffdais>\"}</p>\n     *\n     * <p>If an entity is unrecognized, it is left alone, and inserted\n     * verbatim into the result string. e.g. {@code \"&gt;&zzzz;x\"} will\n     * become {@code \">&zzzz;x\"}.</p>\n     *\n     * @param input  the {@code String} to unescape, may be null\n     * @return a new unescaped {@code String}, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String unescapeJava(final String input)",
        "implementation": "public static String unescapeJava(final String input) {\n        return UNESCAPE_JAVA.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "unescapeJava",
        "javadoc": "/**\n     * Unescapes any Java literals found in the {@code String}.\n     * For example, it will turn a sequence of {@code '\\'} and\n     * {@code 'n'} into a newline character, unless the {@code '\\'}\n     * is preceded by another {@code '\\'}.\n     *\n     * @param input  the {@code String} to unescape, may be null\n     * @return a new unescaped {@code String}, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String unescapeJson(final String input)",
        "implementation": "public static String unescapeJson(final String input) {\n        return UNESCAPE_JSON.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "unescapeJson",
        "javadoc": "/**\n     * Unescapes any Json literals found in the {@code String}.\n     *\n     * <p>For example, it will turn a sequence of {@code '\\'} and {@code 'n'}\n     * into a newline character, unless the {@code '\\'} is preceded by another\n     * {@code '\\'}.</p>\n     *\n     * @see #unescapeJava(String)\n     * @param input  the {@code String} to unescape, may be null\n     * @return A new unescaped {@code String}, {@code null} if null string input\n     */"
    },
    {
        "signature": "public static String unescapeXml(final String input)",
        "implementation": "public static String unescapeXml(final String input) {\n        return UNESCAPE_XML.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "unescapeXml",
        "javadoc": "/**\n     * Unescapes a string containing XML entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes.\n     *\n     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n     * Does not support DTDs or external entities.</p>\n     *\n     * <p>Note that numerical \\\\u Unicode codes are unescaped to their respective\n     *    Unicode characters. This may change in future releases.</p>\n     *\n     * @param input  the {@code String} to unescape, may be null\n     * @return a new unescaped {@code String}, {@code null} if null string input\n     * @see #escapeXml10(String)\n     * @see #escapeXml11(String)\n     */"
    },
    {
        "signature": "public static String unescapeXSI(final String input)",
        "implementation": "public static String unescapeXSI(final String input) {\n        return UNESCAPE_XSI.translate(input);\n    }",
        "called_methods": [
            "translate"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\StringEscapeUtils.java",
        "name": "unescapeXSI",
        "javadoc": "/**\n     * Unescapes the characters in a {@code String} using XSI rules.\n     *\n     * @see StringEscapeUtils#escapeXSI(String)\n     * @param input  the {@code String} to unescape, may be null\n     * @return a new unescaped {@code String}, {@code null} if null string input\n     */"
    }
]