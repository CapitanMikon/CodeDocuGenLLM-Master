[
    {
        "signature": "public static String hex(final int codePoint)",
        "implementation": "public static String hex(final int codePoint) {\n        return Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH);\n    }",
        "called_methods": [
            "toHexString",
            "toUpperCase"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\translate\\CharSequenceTranslator.java",
        "name": "hex",
        "javadoc": "/**\n     * Returns an upper case hexadecimal {@code String} for the given\n     * character.\n     *\n     * @param codePoint The code point to convert.\n     * @return An upper case hexadecimal {@code String}\n     */"
    },
    {
        "signature": "public final void translate(final CharSequence input, final Writer writer) throws IOException",
        "implementation": "public final void translate(final CharSequence input, final Writer writer) throws IOException {\n        Validate.isTrue(writer != null, \"The Writer must not be null\");\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        final int len = input.length();\n        while (pos < len) {\n            final int consumed = translate(input, pos, writer);\n            if (consumed == 0) {\n                // inlined implementation of Character.toChars(Character.codePointAt(input, pos))\n                // avoids allocating temp char arrays and duplicate checks\n                final char c1 = input.charAt(pos);\n                writer.write(c1);\n                pos++;\n                if (Character.isHighSurrogate(c1) && pos < len) {\n                    final char c2 = input.charAt(pos);\n                    if (Character.isLowSurrogate(c2)) {\n                      writer.write(c2);\n                      pos++;\n                    }\n                }\n                continue;\n            }\n            // contract with translators is that they have to understand code points\n            // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n        }\n    }",
        "called_methods": [
            "length",
            "translate",
            "toString",
            "isTrue",
            "charAt",
            "write",
            "isHighSurrogate",
            "isLowSurrogate",
            "charCount",
            "codePointAt"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\translate\\CharSequenceTranslator.java",
        "name": "translate",
        "javadoc": "/**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param writer Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */"
    },
    {
        "signature": "public final CharSequenceTranslator with(final CharSequenceTranslator... translators)",
        "implementation": "public final CharSequenceTranslator with(final CharSequenceTranslator... translators) {\n        final CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];\n        newArray[0] = this;\n        System.arraycopy(translators, 0, newArray, 1, translators.length);\n        return new AggregateTranslator(newArray);\n    }",
        "called_methods": [
            "arraycopy"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\translate\\CharSequenceTranslator.java",
        "name": "with",
        "javadoc": "/**\n     * Helper method to create a merger of this translator with another set of\n     * translators. Useful in customizing the standard functionality.\n     *\n     * @param translators CharSequenceTranslator array of translators to merge with this one\n     * @return CharSequenceTranslator merging this translator with the others\n     */"
    }
]