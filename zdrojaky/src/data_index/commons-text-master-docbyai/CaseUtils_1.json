[
    {
        "signature": "public static String toCamelCase(String str, final boolean capitalizeFirstLetter, final char... delimiters)",
        "implementation": "public static String toCamelCase(String str, final boolean capitalizeFirstLetter, final char... delimiters) {\n        if (StringUtils.isEmpty(str)) {\n            return str;\n        }\n        str = str.toLowerCase();\n        final int strLen = str.length();\n        final int[] newCodePoints = new int[strLen];\n        int outOffset = 0;\n        final Set<Integer> delimiterSet = toDelimiterSet(delimiters);\n        boolean capitalizeNext = capitalizeFirstLetter;\n        for (int index = 0; index < strLen;) {\n            final int codePoint = str.codePointAt(index);\n\n            if (delimiterSet.contains(codePoint)) {\n                capitalizeNext = outOffset != 0;\n                index += Character.charCount(codePoint);\n            } else if (capitalizeNext || outOffset == 0 && capitalizeFirstLetter) {\n                final int titleCaseCodePoint = Character.toTitleCase(codePoint);\n                newCodePoints[outOffset++] = titleCaseCodePoint;\n                index += Character.charCount(titleCaseCodePoint);\n                capitalizeNext = false;\n            } else {\n                newCodePoints[outOffset++] = codePoint;\n                index += Character.charCount(codePoint);\n            }\n        }\n\n        return new String(newCodePoints, 0, outOffset);\n    }",
        "called_methods": [
            "isEmpty",
            "toLowerCase",
            "length",
            "toDelimiterSet",
            "codePointAt",
            "contains",
            "charCount",
            "toTitleCase"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\CaseUtils.java",
        "name": "toCamelCase",
        "javadoc": "/**\n     * Converts all the delimiter separated words in a String into camelCase,\n     * that is each word is made up of a title case character and then a series of\n     * lowercase characters.\n     *\n     * <p>The delimiters represent a set of characters understood to separate words.\n     * The first non-delimiter character after a delimiter will be capitalized. The first String\n     * character may or may not be capitalized and it's determined by the user input for capitalizeFirstLetter\n     * variable.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <p>A input string with only delimiter characters returns {@code \"\"}.</p>\n     *\n     * Capitalization uses the Unicode title case, normally equivalent to\n     * upper case and cannot perform locale-sensitive mappings.\n     *\n     * <pre>\n     * CaseUtils.toCamelCase(null, false)                                 = null\n     * CaseUtils.toCamelCase(\"\", false, *)                                = \"\"\n     * CaseUtils.toCamelCase(*, false, null)                              = *\n     * CaseUtils.toCamelCase(*, true, new char[0])                        = *\n     * CaseUtils.toCamelCase(\"To.Camel.Case\", false, new char[]{'.'})     = \"toCamelCase\"\n     * CaseUtils.toCamelCase(\" to @ Camel case\", true, new char[]{'@'})   = \"ToCamelCase\"\n     * CaseUtils.toCamelCase(\" @to @ Camel case\", false, new char[]{'@'}) = \"toCamelCase\"\n     * CaseUtils.toCamelCase(\" @\", false, new char[]{'@'})                = \"\"\n     * </pre>\n     *\n     * @param str  the String to be converted to camelCase, may be null\n     * @param capitalizeFirstLetter boolean that determines if the first character of first word should be title case.\n     * @param delimiters  set of characters to determine capitalization, null and/or empty array means whitespace\n     * @return camelCase of String, {@code null} if null String input\n     */"
    },
    {
        "signature": "private static Set<Integer> toDelimiterSet(final char[] delimiters)",
        "implementation": "private static Set<Integer> toDelimiterSet(final char[] delimiters) {\n        final Set<Integer> delimiterHashSet = new HashSet<>();\n        delimiterHashSet.add(Character.codePointAt(new char[]{' '}, 0));\n        if (ArrayUtils.isEmpty(delimiters)) {\n            return delimiterHashSet;\n        }\n\n        for (int index = 0; index < delimiters.length; index++) {\n            delimiterHashSet.add(Character.codePointAt(delimiters, index));\n        }\n        return delimiterHashSet;\n    }",
        "called_methods": [
            "add",
            "codePointAt",
            "isEmpty"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\CaseUtils.java",
        "name": "toDelimiterSet",
        "javadoc": "/**\n     * Converts an array of delimiters to a hash set of code points. Code point of space(32) is added\n     * as the default value. The generated hash set provides O(1) lookup time.\n     *\n     * @param delimiters  set of characters to determine capitalization, null means whitespace\n     * @return Set<Integer>\n     */"
    }
]