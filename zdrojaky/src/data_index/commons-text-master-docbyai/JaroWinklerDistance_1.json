[
    {
        "signature": "protected static int[] matches(final CharSequence first, final CharSequence second)",
        "implementation": "protected static int[] matches(final CharSequence first, final CharSequence second) {\n        return JaroWinklerSimilarity.matches(first, second);\n    }",
        "called_methods": [
            "matches"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerDistance.java",
        "name": "matches",
        "javadoc": "/**\n     * Computes the Jaro-Winkler string matches, half transpositions, prefix array.\n     *\n     * @param first the first string to be matched.\n     * @param second the second string to be matched.\n     * @return array containing: matches, half transpositions, and prefix\n     * @deprecated Deprecated as of 1.7. This method will be removed in 2.0, and moved to a Jaro Winkler similarity\n     *             class. TODO see TEXT-104.\n     */"
    },
    {
        "signature": "public <E> Double apply(final SimilarityInput<E> left, final SimilarityInput<E> right)",
        "implementation": "public <E> Double apply(final SimilarityInput<E> left, final SimilarityInput<E> right) {\n        if (left == null || right == null) {\n            throw new IllegalArgumentException(\"CharSequences must not be null\");\n        }\n        return 1 - JaroWinklerSimilarity.INSTANCE.apply(left, right);\n    }",
        "called_methods": [
            "apply",
            "input"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerDistance.java",
        "name": "apply",
        "javadoc": "/**\n     * Computes the Jaro Winkler Distance between two character sequences.\n     *\n     * <pre>\n     * distance.apply(null, null)          = IllegalArgumentException\n     * distance.apply(\"foo\", null)         = IllegalArgumentException\n     * distance.apply(null, \"foo\")         = IllegalArgumentException\n     * distance.apply(\"\", \"\")              = 0.0\n     * distance.apply(\"foo\", \"foo\")        = 0.0\n     * distance.apply(\"foo\", \"foo \")       = 0.06\n     * distance.apply(\"foo\", \"foo  \")      = 0.09\n     * distance.apply(\"foo\", \" foo \")      = 0.13\n     * distance.apply(\"foo\", \"  foo\")      = 0.49\n     * distance.apply(\"\", \"a\")             = 1.0\n     * distance.apply(\"aaapppp\", \"\")       = 1.0\n     * distance.apply(\"frog\", \"fog\")       = 0.07\n     * distance.apply(\"fly\", \"ant\")        = 1.0\n     * distance.apply(\"elephant\", \"hippo\") = 0.56\n     * distance.apply(\"hippo\", \"elephant\") = 0.56\n     * distance.apply(\"hippo\", \"zzzzzzzz\") = 1.0\n     * distance.apply(\"hello\", \"hallo\")    = 0.12\n     * distance.apply(\"ABC Corporation\", \"ABC Corp\") = 0.09\n     * distance.apply(\"D N H Enterprises Inc\", \"D &amp; H Enterprises, Inc.\") = 0.05\n     * distance.apply(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\") = 0.08\n     * distance.apply(\"PENNSYLVANIA\", \"PENNCISYLVNIA\") = 0.12\n     * </pre>\n     *\n     * @param <E> The type of similarity score unit.\n     * @param left the first input, must not be null.\n     * @param right the second input, must not be null.\n     * @return result distance.\n     * @throws IllegalArgumentException if either CharSequence input is {@code null}.\n     * @since 1.13.0\n     */"
    }
]