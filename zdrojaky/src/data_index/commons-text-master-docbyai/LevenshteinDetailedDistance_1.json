[
    {
        "signature": "private static <E> LevenshteinResults findDetailedResults(final SimilarityInput<E> left,\n                                                          final SimilarityInput<E> right,\n                                                          final int[][] matrix,\n                                                          final boolean swapped)",
        "implementation": "private static <E> LevenshteinResults findDetailedResults(final SimilarityInput<E> left,\n                                                          final SimilarityInput<E> right,\n                                                          final int[][] matrix,\n                                                          final boolean swapped) {\n\n        int delCount = 0;\n        int addCount = 0;\n        int subCount = 0;\n\n        int rowIndex = right.length();\n        int columnIndex = left.length();\n\n        int dataAtLeft = 0;\n        int dataAtTop = 0;\n        int dataAtDiagonal = 0;\n        int data = 0;\n        boolean deleted = false;\n        boolean added = false;\n\n        while (rowIndex >= 0 && columnIndex >= 0) {\n\n            if (columnIndex == 0) {\n                dataAtLeft = -1;\n            } else {\n                dataAtLeft = matrix[rowIndex][columnIndex - 1];\n            }\n            if (rowIndex == 0) {\n                dataAtTop = -1;\n            } else {\n                dataAtTop = matrix[rowIndex - 1][columnIndex];\n            }\n            if (rowIndex > 0 && columnIndex > 0) {\n                dataAtDiagonal = matrix[rowIndex - 1][columnIndex - 1];\n            } else {\n                dataAtDiagonal = -1;\n            }\n            if (dataAtLeft == -1 && dataAtTop == -1 && dataAtDiagonal == -1) {\n                break;\n            }\n            data = matrix[rowIndex][columnIndex];\n\n            // case in which the character at left and right are the same,\n            // in this case none of the counters will be incremented.\n            if (columnIndex > 0 && rowIndex > 0 && left.at(columnIndex - 1).equals(right.at(rowIndex - 1))) {\n                columnIndex--;\n                rowIndex--;\n                continue;\n            }\n\n            // handling insert and delete cases.\n            deleted = false;\n            added = false;\n            if (data - 1 == dataAtLeft && data <= dataAtDiagonal && data <= dataAtTop\n                    || dataAtDiagonal == -1 && dataAtTop == -1) { // NOPMD\n                columnIndex--;\n                if (swapped) {\n                    addCount++;\n                    added = true;\n                } else {\n                    delCount++;\n                    deleted = true;\n                }\n            } else if (data - 1 == dataAtTop && data <= dataAtDiagonal && data <= dataAtLeft\n                    || dataAtDiagonal == -1 && dataAtLeft == -1) { // NOPMD\n                rowIndex--;\n                if (swapped) {\n                    delCount++;\n                    deleted = true;\n                } else {\n                    addCount++;\n                    added = true;\n                }\n            }\n\n            // substituted case\n            if (!added && !deleted) {\n                subCount++;\n                columnIndex--;\n                rowIndex--;\n            }\n        }\n        return new LevenshteinResults(addCount + delCount + subCount, addCount, delCount, subCount);\n    }",
        "called_methods": [
            "length",
            "at",
            "equals"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistance.java",
        "name": "findDetailedResults",
        "javadoc": "/**\n     * Finds count for each of the three [insert, delete, substitute] operations\n     * needed. This is based on the matrix formed based on the two character\n     * sequence.\n     *\n     * @param <E> The type of similarity score unit.\n     * @param left character sequence which need to be converted from\n     * @param right character sequence which need to be converted to\n     * @param matrix two dimensional array containing\n     * @param swapped tells whether the value for left character sequence and right\n     *            character sequence were swapped to save memory\n     * @return result object containing the count of insert, delete and substitute and total count needed\n     */"
    },
    {
        "signature": "public static LevenshteinDetailedDistance getDefaultInstance()",
        "implementation": "public static LevenshteinDetailedDistance getDefaultInstance() {\n        return INSTANCE;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistance.java",
        "name": "getDefaultInstance",
        "javadoc": "/**\n     * Gets the default instance.\n     *\n     * @return The default instace\n     */"
    },
    {
        "signature": "private static <E> LevenshteinResults limitedCompare(SimilarityInput<E> left, SimilarityInput<E> right, final int threshold)",
        "implementation": "private static <E> LevenshteinResults limitedCompare(SimilarityInput<E> left, SimilarityInput<E> right, final int threshold) { //NOPMD\n        if (left == null || right == null) {\n            throw new IllegalArgumentException(\"CharSequences must not be null\");\n        }\n        if (threshold < 0) {\n            throw new IllegalArgumentException(\"Threshold must not be negative\");\n        }\n\n        /*\n         * This implementation only computes the distance if it's less than or\n         * equal to the threshold value, returning -1 if it's greater. The\n         * advantage is performance: unbounded distance is O(nm), but a bound of\n         * k allows us to reduce it to O(km) time by only computing a diagonal\n         * stripe of width 2k + 1 of the cost table. It is also possible to use\n         * this to compute the unbounded Levenshtein distance by starting the\n         * threshold at 1 and doubling each time until the distance is found;\n         * this is O(dm), where d is the distance.\n         *\n         * One subtlety comes from needing to ignore entries on the border of\n         * our stripe eg. p[] = |#|#|#|* d[] = *|#|#|#| We must ignore the entry\n         * to the left of the leftmost member We must ignore the entry above the\n         * rightmost member\n         *\n         * Another subtlety comes from our stripe running off the matrix if the\n         * strings aren't of the same size. Since string s is always swapped to\n         * be the shorter of the two, the stripe will always run off to the\n         * upper right instead of the lower left of the matrix.\n         *\n         * As a concrete example, suppose s is of length 5, t is of length 7,\n         * and our threshold is 1. In this case we're going to walk a stripe of\n         * length 3. The matrix would look like so:\n         *\n         * <pre>\n         *    1 2 3 4 5\n         * 1 |#|#| | | |\n         * 2 |#|#|#| | |\n         * 3 | |#|#|#| |\n         * 4 | | |#|#|#|\n         * 5 | | | |#|#|\n         * 6 | | | | |#|\n         * 7 | | | | | |\n         * </pre>\n         *\n         * Note how the stripe leads off the table as there is no possible way\n         * to turn a string of length 5 into one of length 7 in edit distance of\n         * 1.\n         *\n         * Additionally, this implementation decreases memory usage by using two\n         * single-dimensional arrays and swapping them back and forth instead of\n         * allocating an entire n by m matrix. This requires a few minor\n         * changes, such as immediately returning when it's detected that the\n         * stripe has run off the matrix and initially filling the arrays with\n         * large values so that entries we don't compute are ignored.\n         *\n         * See Algorithms on Strings, Trees and Sequences by Dan Gusfield for\n         * some discussion.\n         */\n\n        int n = left.length(); // length of left\n        int m = right.length(); // length of right\n\n        // if one string is empty, the edit distance is necessarily the length of the other\n        if (n == 0) {\n            return m <= threshold ? new LevenshteinResults(m, m, 0, 0) : new LevenshteinResults(-1, 0, 0, 0);\n        }\n        if (m == 0) {\n            return n <= threshold ? new LevenshteinResults(n, 0, n, 0) : new LevenshteinResults(-1, 0, 0, 0);\n        }\n\n        boolean swapped = false;\n        if (n > m) {\n            // swap the two strings to consume less memory\n            final SimilarityInput<E> tmp = left;\n            left = right;\n            right = tmp;\n            n = m;\n            m = right.length();\n            swapped = true;\n        }\n\n        int[] p = new int[n + 1]; // 'previous' cost array, horizontally\n        int[] d = new int[n + 1]; // cost array, horizontally\n        int[] tempD; // placeholder to assist in swapping p and d\n        final int[][] matrix = new int[m + 1][n + 1];\n\n        //filling the first row and first column values in the matrix\n        for (int index = 0; index <= n; index++) {\n            matrix[0][index] = index;\n        }\n        for (int index = 0; index <= m; index++) {\n            matrix[index][0] = index;\n        }\n\n        // fill in starting table values\n        final int boundary = Math.min(n, threshold) + 1;\n        for (int i = 0; i < boundary; i++) {\n            p[i] = i;\n        }\n        // these fills ensure that the value above the rightmost entry of our\n        // stripe will be ignored in following loop iterations\n        Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);\n        Arrays.fill(d, Integer.MAX_VALUE);\n\n        // iterates through t\n        for (int j = 1; j <= m; j++) {\n            final E rightJ = right.at(j - 1); // jth character of right\n            d[0] = j;\n\n            // compute stripe indices, constrain to array size\n            final int min = Math.max(1, j - threshold);\n            final int max = j > Integer.MAX_VALUE - threshold ? n : Math.min(\n                    n, j + threshold);\n\n            // the stripe may lead off of the table if s and t are of different sizes\n            if (min > max) {\n                return new LevenshteinResults(-1, 0, 0, 0);\n            }\n\n            // ignore entry left of leftmost\n            if (min > 1) {\n                d[min - 1] = Integer.MAX_VALUE;\n            }\n\n            // iterates through [min, max] in s\n            for (int i = min; i <= max; i++) {\n                if (left.at(i - 1).equals(rightJ)) {\n                    // diagonally left and up\n                    d[i] = p[i - 1];\n                } else {\n                    // 1 + minimum of cell to the left, to the top, diagonally left and up\n                    d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);\n                }\n                matrix[j][i] = d[i];\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            tempD = p;\n            p = d;\n            d = tempD;\n        }\n\n        // if p[n] is greater than the threshold, there's no guarantee on it being the correct distance\n        if (p[n] <= threshold) {\n            return findDetailedResults(left, right, matrix, swapped);\n        }\n        return new LevenshteinResults(-1, 0, 0, 0);\n    }",
        "called_methods": [
            "length",
            "min",
            "fill",
            "at",
            "max",
            "equals",
            "findDetailedResults"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistance.java",
        "name": "limitedCompare",
        "javadoc": "/**\n     * Finds the Levenshtein distance between two CharSequences if it's less than or\n     * equal to a given threshold.\n     *\n     * <p>\n     * This implementation follows from Algorithms on Strings, Trees and\n     * Sequences by Dan Gusfield and Chas Emerick's implementation of the\n     * Levenshtein distance algorithm from <a\n     * href=\"http://www.merriampark.com/ld.htm\"\n     * >http://www.merriampark.com/ld.htm</a>\n     * </p>\n     *\n     * <pre>\n     * limitedCompare(null, *, *)             = IllegalArgumentException\n     * limitedCompare(*, null, *)             = IllegalArgumentException\n     * limitedCompare(*, *, -1)               = IllegalArgumentException\n     * limitedCompare(\"\",\"\", 0)               = 0\n     * limitedCompare(\"aaapppp\", \"\", 8)       = 7\n     * limitedCompare(\"aaapppp\", \"\", 7)       = 7\n     * limitedCompare(\"aaapppp\", \"\", 6))      = -1\n     * limitedCompare(\"elephant\", \"hippo\", 7) = 7\n     * limitedCompare(\"elephant\", \"hippo\", 6) = -1\n     * limitedCompare(\"hippo\", \"elephant\", 7) = 7\n     * limitedCompare(\"hippo\", \"elephant\", 6) = -1\n     * </pre>\n     *\n     * @param <E> The type of similarity score unit.\n     * @param left the first CharSequence, must not be null\n     * @param right the second CharSequence, must not be null\n     * @param threshold the target threshold, must not be negative\n     * @return result distance, or -1\n     */"
    },
    {
        "signature": "private static <E> LevenshteinResults unlimitedCompare(SimilarityInput<E> left, SimilarityInput<E> right)",
        "implementation": "private static <E> LevenshteinResults unlimitedCompare(SimilarityInput<E> left, SimilarityInput<E> right) {\n        if (left == null || right == null) {\n            throw new IllegalArgumentException(\"CharSequences must not be null\");\n        }\n\n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length() + 1 by t.length() + 1,\n           we maintain two single-dimensional arrays of length s.length() + 1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        int n = left.length(); // length of left\n        int m = right.length(); // length of right\n\n        if (n == 0) {\n            return new LevenshteinResults(m, m, 0, 0);\n        }\n        if (m == 0) {\n            return new LevenshteinResults(n, 0, n, 0);\n        }\n        boolean swapped = false;\n        if (n > m) {\n            // swap the input strings to consume less memory\n            final SimilarityInput<E> tmp = left;\n            left = right;\n            right = tmp;\n            n = m;\n            m = right.length();\n            swapped = true;\n        }\n\n        int[] p = new int[n + 1]; // 'previous' cost array, horizontally\n        int[] d = new int[n + 1]; // cost array, horizontally\n        int[] tempD; //placeholder to assist in swapping p and d\n        final int[][] matrix = new int[m + 1][n + 1];\n\n        // filling the first row and first column values in the matrix\n        for (int index = 0; index <= n; index++) {\n            matrix[0][index] = index;\n        }\n        for (int index = 0; index <= m; index++) {\n            matrix[index][0] = index;\n        }\n\n        // indexes into strings left and right\n        int i; // iterates through left\n        int j; // iterates through right\n\n        E rightJ; // jth character of right\n\n        int cost; // cost\n        for (i = 0; i <= n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j <= m; j++) {\n            rightJ = right.at(j - 1);\n            d[0] = j;\n\n            for (i = 1; i <= n; i++) {\n                cost = left.at(i - 1).equals(rightJ) ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);\n                //filling the matrix\n                matrix[j][i] = d[i];\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            tempD = p;\n            p = d;\n            d = tempD;\n        }\n        return findDetailedResults(left, right, matrix, swapped);\n    }",
        "called_methods": [
            "length",
            "at",
            "equals",
            "min",
            "findDetailedResults"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistance.java",
        "name": "unlimitedCompare",
        "javadoc": "/**\n     * Finds the Levenshtein distance between two Strings.\n     *\n     * <p>A higher score indicates a greater distance.</p>\n     *\n     * <p>The previous implementation of the Levenshtein distance algorithm\n     * was from <a href=\"http://www.merriampark.com/ld.htm\">http://www.merriampark.com/ld.htm</a></p>\n     *\n     * <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError\n     * which can occur when my Java implementation is used with very large strings.<br>\n     * This implementation of the Levenshtein distance algorithm\n     * is from <a href=\"http://www.merriampark.com/ldjava.htm\">http://www.merriampark.com/ldjava.htm</a></p>\n     *\n     * <pre>\n     * unlimitedCompare(null, *)             = IllegalArgumentException\n     * unlimitedCompare(*, null)             = IllegalArgumentException\n     * unlimitedCompare(\"\",\"\")               = 0\n     * unlimitedCompare(\"\",\"a\")              = 1\n     * unlimitedCompare(\"aaapppp\", \"\")       = 7\n     * unlimitedCompare(\"frog\", \"fog\")       = 1\n     * unlimitedCompare(\"fly\", \"ant\")        = 3\n     * unlimitedCompare(\"elephant\", \"hippo\") = 7\n     * unlimitedCompare(\"hippo\", \"elephant\") = 7\n     * unlimitedCompare(\"hippo\", \"zzzzzzzz\") = 8\n     * unlimitedCompare(\"hello\", \"hallo\")    = 1\n     * </pre>\n     *\n     * @param <E> The type of similarity score unit.\n     * @param left the first CharSequence, must not be null\n     * @param right the second CharSequence, must not be null\n     * @return result distance, or -1\n     * @throws IllegalArgumentException if either CharSequence input is {@code null}\n     */"
    },
    {
        "signature": "public <E> LevenshteinResults apply(final SimilarityInput<E> left, final SimilarityInput<E> right)",
        "implementation": "public <E> LevenshteinResults apply(final SimilarityInput<E> left, final SimilarityInput<E> right) {\n        if (threshold != null) {\n            return limitedCompare(left, right, threshold);\n        }\n        return unlimitedCompare(left, right);\n    }",
        "called_methods": [
            "apply",
            "input",
            "limitedCompare",
            "unlimitedCompare"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistance.java",
        "name": "apply",
        "javadoc": "/**\n     * Computes the Levenshtein distance between two Strings.\n     *\n     * <p>A higher score indicates a greater distance.</p>\n     *\n     * <p>The previous implementation of the Levenshtein distance algorithm\n     * was from <a href=\"http://www.merriampark.com/ld.htm\">http://www.merriampark.com/ld.htm</a></p>\n     *\n     * <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError\n     * which can occur when my Java implementation is used with very large strings.<br>\n     * This implementation of the Levenshtein distance algorithm\n     * is from <a href=\"http://www.merriampark.com/ldjava.htm\">http://www.merriampark.com/ldjava.htm</a></p>\n     *\n     * <pre>\n     * distance.apply(null, *)             = IllegalArgumentException\n     * distance.apply(*, null)             = IllegalArgumentException\n     * distance.apply(\"\",\"\")               = 0\n     * distance.apply(\"\",\"a\")              = 1\n     * distance.apply(\"aaapppp\", \"\")       = 7\n     * distance.apply(\"frog\", \"fog\")       = 1\n     * distance.apply(\"fly\", \"ant\")        = 3\n     * distance.apply(\"elephant\", \"hippo\") = 7\n     * distance.apply(\"hippo\", \"elephant\") = 7\n     * distance.apply(\"hippo\", \"zzzzzzzz\") = 8\n     * distance.apply(\"hello\", \"hallo\")    = 1\n     * </pre>\n     *\n     * @param <E> The type of similarity score unit.\n     * @param left the first input, must not be null\n     * @param right the second input, must not be null\n     * @return result distance, or -1\n     * @throws IllegalArgumentException if either String input {@code null}\n     * @since 1.13.0\n     */"
    },
    {
        "signature": "public Integer getThreshold()",
        "implementation": "public Integer getThreshold() {\n        return threshold;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistance.java",
        "name": "getThreshold",
        "javadoc": "/**\n     * Gets the distance threshold.\n     *\n     * @return The distance threshold\n     */"
    }
]