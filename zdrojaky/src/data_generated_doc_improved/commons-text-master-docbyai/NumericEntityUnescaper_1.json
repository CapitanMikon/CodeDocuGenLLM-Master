[
    {
        "signature": "public boolean isSet(final OPTION option)",
        "implementation": "public boolean isSet(final OPTION option) {\n        return options.contains(option);\n    }",
        "called_methods": [
            "contains"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\translate\\NumericEntityUnescaper.java",
        "name": "isSet",
        "javadoc": "/**\n * Checks if a specific option is set.\n *\n * @param option The option to check for.\n * @return True if the option is set, false otherwise.\n */\n",
        "improved_javadoc": "/**\n * Checks if a specific option is set.\n *\n * @param option The option to check for. Must not be null.\n * @return True if the option is set, false otherwise.\n */\n"
    },
    {
        "signature": "public int translate(final CharSequence input, final int index, final Writer writer) throws IOException",
        "implementation": "public int translate(final CharSequence input, final int index, final Writer writer) throws IOException {\n        final int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            final char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#\n                if (start == seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end\n            while (end < seqEnd && (input.charAt(end) >= '0' && input.charAt(end) <= '9'\n                                    || input.charAt(end) >= 'a' && input.charAt(end) <= 'f'\n                                    || input.charAt(end) >= 'A' && input.charAt(end) <= 'F')) {\n                end++;\n            }\n\n            final boolean semiNext = end != seqEnd && input.charAt(end) == ';';\n\n            if (!semiNext) {\n                if (isSet(OPTION.semiColonRequired)) {\n                    return 0;\n                }\n                if (isSet(OPTION.errorIfNoSemiColon)) {\n                    throw new IllegalArgumentException(\"Semi-colon required at end of numeric entity\");\n                }\n            }\n\n            final int entityValue;\n            try {\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch (final NumberFormatException nfe) {\n                return 0;\n            }\n\n            if (entityValue > 0xFFFF) {\n                final char[] chrs = Character.toChars(entityValue);\n                writer.write(chrs[0]);\n                writer.write(chrs[1]);\n            } else {\n                writer.write(entityValue);\n            }\n\n            return 2 + end - start + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n        }\n        return 0;\n    }",
        "called_methods": [
            "length",
            "charAt",
            "isSet",
            "parseInt",
            "subSequence",
            "toString",
            "toChars",
            "write"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\translate\\NumericEntityUnescaper.java",
        "name": "translate",
        "javadoc": "/**\n * Translates a numeric entity in the input CharSequence to its corresponding Unicode character.\n *\n * @param input   the input CharSequence containing the numeric entity to translate\n * @param index   the starting position of the numeric entity within the input CharSequence\n * @param writer  the Writer to write the translated character to\n * @return        the number of characters written to the Writer, or 0 if no translation was performed\n * @throws IOException if an I/O error occurs while writing to the Writer\n */\n",
        "improved_javadoc": "/**\n * Translates a numeric entity in the input CharSequence to its corresponding Unicode character.\n *\n * @param input   the input CharSequence containing the numeric entity to translate\n * @param index   the starting position of the numeric entity within the input CharSequence\n * @param writer  the Writer to write the translated character to\n * @return        the number of characters written to the Writer, or 0 if no translation was performed\n * @throws IOException if an I/O error occurs while writing to the Writer\n */\n"
    }
]