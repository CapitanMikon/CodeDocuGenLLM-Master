[
    {
        "signature": "public String lookup(final String key)",
        "implementation": "public String lookup(final String key) {\n        if (key == null) {\n            return null;\n        }\n        final String[] keys = key.split(SPLIT_STR, 2);\n        final int keyLen = keys.length;\n        if (keyLen != 2) {\n            throw IllegalArgumentExceptions.format(\"Bad script key format [%s]; expected format is EngineName:Script.\",\n                key);\n        }\n        final String engineName = keys[0];\n        final String script = keys[1];\n        try {\n            final ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName(engineName);\n            if (scriptEngine == null) {\n                throw new IllegalArgumentException(\"No script engine named \" + engineName);\n            }\n            return Objects.toString(scriptEngine.eval(script), null);\n        } catch (final Exception e) {\n            throw IllegalArgumentExceptions.format(e, \"Error in script engine [%s] evaluating script [%s].\", engineName,\n                script);\n        }\n    }",
        "called_methods": [
            "split",
            "format",
            "getEngineByName",
            "toString",
            "eval"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookup.java",
        "name": "lookup",
        "javadoc": "/**\n * Looks up a script by its key.\n *\n * The key is expected to be in the format \"EngineName:Script\".\n * If the key is null, this method returns null.\n *\n * @param key the script key to look up\n * @return the result of evaluating the script, or null if the key is null\n * @throws IllegalArgumentException if the key is not in the correct format\n * @throws Exception if an error occurs while evaluating the script\n */\n",
        "improved_javadoc": "INVALID FORMAT"
    }
]