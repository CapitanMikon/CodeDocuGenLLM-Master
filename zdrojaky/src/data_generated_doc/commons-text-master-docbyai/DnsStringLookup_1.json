[
    {
        "signature": "public String lookup(final String key)",
        "implementation": "public String lookup(final String key) {\n        if (key == null) {\n            return null;\n        }\n        final String[] keys = key.trim().split(\"\\\\|\");\n        final int keyLen = keys.length;\n        final String subKey = keys[0].trim();\n        final String subValue = keyLen < 2 ? key : keys[1].trim();\n        try {\n            final InetAddress inetAddress = InetAddress.getByName(subValue);\n            switch (subKey) {\n            case InetAddressKeys.KEY_NAME:\n                return inetAddress.getHostName();\n            case InetAddressKeys.KEY_CANONICAL_NAME:\n                return inetAddress.getCanonicalHostName();\n            case InetAddressKeys.KEY_ADDRESS:\n                return inetAddress.getHostAddress();\n            default:\n                return inetAddress.getHostAddress();\n            }\n        } catch (final UnknownHostException e) {\n            return null;\n        }\n    }",
        "called_methods": [
            "trim",
            "split",
            "getByName",
            "getHostName",
            "getCanonicalHostName",
            "getHostAddress"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\lookup\\DnsStringLookup.java",
        "name": "lookup",
        "javadoc": "/**\n * Looks up an InetAddress based on a key.\n *\n * The key is expected to be in the format \"key|value\", where:\n * - \"key\" is one of {@link InetAddressKeys#KEY_NAME}, \n *   {@link InetAddressKeys#KEY_CANONICAL_NAME} or {@link InetAddressKeys#KEY_ADDRESS}.\n * - \"value\" is the value associated with the key.\n *\n * If the key is null, this method returns null. Otherwise, it trims and splits the key\n * into its constituent parts, and uses them to retrieve an InetAddress from the network.\n *\n * @param key The key to look up.\n * @return The InetAddress associated with the key, or null if the key is invalid or cannot be resolved.\n * @throws UnknownHostException If there is a problem resolving the InetAddress.\n */\n"
    }
]