[
    {
        "signature": "public StringMatcher andMatcher(final StringMatcher... stringMatchers)",
        "implementation": "public StringMatcher andMatcher(final StringMatcher... stringMatchers) {\n        final int len = ArrayUtils.getLength(stringMatchers);\n        if (len == 0) {\n            return NONE_MATCHER;\n        }\n        if (len == 1) {\n            return stringMatchers[0];\n        }\n        return new AbstractStringMatcher.AndStringMatcher(stringMatchers);\n    }",
        "called_methods": [
            "getLength"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "andMatcher",
        "javadoc": "/**\n * Combines multiple StringMatchers into a single AndStringMatcher.\n *\n * @param stringMatchers The StringMatchers to combine. May be empty, in which case this method returns NONE_MATCHER.\n * @return A new AndStringMatcher instance that combines all provided StringMatchers.\n */\n"
    },
    {
        "signature": "public StringMatcher charMatcher(final char ch)",
        "implementation": "public StringMatcher charMatcher(final char ch) {\n        return new AbstractStringMatcher.CharMatcher(ch);\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "charMatcher",
        "javadoc": "/**\n * Creates a string matcher that matches any occurrence of the specified character.\n *\n * @param ch the character to match\n * @return a string matcher that matches any occurrence of the specified character\n */\n"
    },
    {
        "signature": "public StringMatcher charSetMatcher(final String chars)",
        "implementation": "public StringMatcher charSetMatcher(final String chars) {\n        final int len = StringUtils.length(chars);\n        if (len == 0) {\n            return NONE_MATCHER;\n        }\n        if (len == 1) {\n            return new AbstractStringMatcher.CharMatcher(chars.charAt(0));\n        }\n        return new AbstractStringMatcher.CharSetMatcher(chars.toCharArray());\n    }",
        "called_methods": [
            "getLength",
            "length",
            "charAt",
            "toCharArray"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "charSetMatcher",
        "javadoc": "/**\n * Creates a string matcher that matches any character in the specified set of characters.\n *\n * @param chars the set of characters to match, cannot be null or empty\n * @return a string matcher that matches any character in the specified set of characters\n */\n"
    },
    {
        "signature": "public StringMatcher commaMatcher()",
        "implementation": "public StringMatcher commaMatcher() {\n        return COMMA_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "commaMatcher",
        "javadoc": "/**\n * Returns a string matcher that matches commas.\n *\n * @return A string matcher that matches commas.\n */\n"
    },
    {
        "signature": "public StringMatcher doubleQuoteMatcher()",
        "implementation": "public StringMatcher doubleQuoteMatcher() {\n        return DOUBLE_QUOTE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "doubleQuoteMatcher",
        "javadoc": "/**\n * Returns a string matcher that matches strings enclosed within double quotes.\n *\n * @return A string matcher that matches strings enclosed within double quotes.\n */\n"
    },
    {
        "signature": "public StringMatcher noneMatcher()",
        "implementation": "public StringMatcher noneMatcher() {\n        return NONE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "noneMatcher",
        "javadoc": "/**\n * Returns a matcher that always matches.\n *\n * @return A matcher that always returns true for any input.\n */\n"
    },
    {
        "signature": "public StringMatcher quoteMatcher()",
        "implementation": "public StringMatcher quoteMatcher() {\n        return QUOTE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "quoteMatcher",
        "javadoc": "/**\n * Returns a matcher that matches quoted strings.\n *\n * @return A matcher that matches quoted strings.\n */\n"
    },
    {
        "signature": "public StringMatcher singleQuoteMatcher()",
        "implementation": "public StringMatcher singleQuoteMatcher() {\n        return SINGLE_QUOTE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "singleQuoteMatcher",
        "javadoc": "/**\n * Returns a string matcher that matches strings enclosed within single quotes.\n *\n * @return A string matcher that matches strings enclosed within single quotes.\n */\n"
    },
    {
        "signature": "public StringMatcher spaceMatcher()",
        "implementation": "public StringMatcher spaceMatcher() {\n        return SPACE_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "spaceMatcher",
        "javadoc": "/**\n * Returns a string matcher that matches whitespace characters.\n *\n * @return A string matcher that matches whitespace characters.\n */\n"
    },
    {
        "signature": "public StringMatcher splitMatcher()",
        "implementation": "public StringMatcher splitMatcher() {\n        return SPLIT_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "splitMatcher",
        "javadoc": "/**\n * Returns a string matcher that splits input strings based on whitespace.\n *\n * @return A string matcher instance for splitting input strings.\n */\n"
    },
    {
        "signature": "public StringMatcher stringMatcher(final String str)",
        "implementation": "public StringMatcher stringMatcher(final String str) {\n        return StringUtils.isEmpty(str) ? NONE_MATCHER : stringMatcher(str.toCharArray());\n    }",
        "called_methods": [
            "getLength",
            "isEmpty",
            "stringMatcher",
            "toCharArray"
        ],
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "stringMatcher",
        "javadoc": "/**\n * Returns a matcher for the given string.\n *\n * If the input string is empty, returns a default matcher (NONE_MATCHER).\n * Otherwise, creates a new matcher from the character array representation of the string.\n *\n * @param str the input string to create a matcher for\n * @return a matcher for the input string\n */\n"
    },
    {
        "signature": "public StringMatcher tabMatcher()",
        "implementation": "public StringMatcher tabMatcher() {\n        return TAB_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "tabMatcher",
        "javadoc": "/**\n * Returns a string matcher for matching tabs.\n *\n * @return A string matcher that matches tabs.\n */\n"
    },
    {
        "signature": "public StringMatcher trimMatcher()",
        "implementation": "public StringMatcher trimMatcher() {\n        return TRIM_MATCHER;\n    }",
        "called_methods": "",
        "repository": "commons-text-master-docbyai",
        "source": "commons-text-master-docbyai\\src\\main\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactory.java",
        "name": "trimMatcher",
        "javadoc": "/**\n * Returns a string matcher that trims whitespace from input strings.\n *\n * @return A pre-configured string matcher for trimming whitespace.\n */\n"
    }
]